{"version":3,"sources":["firebase.js","Logo.svg","components/template/Header.jsx","App.jsx","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Header","className","href","src","logo","alt","App","useState","tareas","setTareas","tarea","setTarea","modoEdicion","setModoEdicion","id","setId","useEffect","a","db","firestore","collection","get","data","arrayData","docs","map","doc","console","log","obtenerDatos","agregar","e","preventDefault","trim","nuevaTarea","name","date","Date","now","add","eliminar","delete","arrayFiltered","filter","item","editar","update","arrayEditado","fecha","onSubmit","type","placeholder","onChange","target","value","onClick","activarEdicion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3ad8e77.chunk.js","sourcesContent":["//ARCHIVO DE INTEGRACION DE FIRESTORE EN PROYECTO:\r\n/**\r\n * Este archivo contiene los datos para configurar firestore de manera que podamos usar sus servicio.\r\n * ##Todos estos datos y configuraciones vienen directamente desde firebase en su seccion de cloudstorm.\r\n */\r\n\r\n// Configuración e instalación de firebase para proyecto en React\r\nimport firebase from \"firebase/app\"\r\n//importamos la configuracion de la bbdd\r\nimport \"firebase/firestore\"\r\n\r\n//api key para firebase\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBV9SCTShO4a1PjUTfjdT-YleDEdBR3nps\",\r\n    authDomain: \"crud-react-8029e.firebaseapp.com\",\r\n    projectId: \"crud-react-8029e\",\r\n    storageBucket: \"crud-react-8029e.appspot.com\",\r\n    messagingSenderId: \"1024830323619\",\r\n    appId: \"1:1024830323619:web:bb990e06810f3147997816\"\r\n};\r\n//inicializar firebase\r\n//el objeto que se utiliza a continuacion es lo que hemos importado de la libreria firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport {firebase}","export default __webpack_public_path__ + \"static/media/Logo.198e993f.svg\";","import React from \"react\";\r\nimport logo from \"../../Logo.svg\"\r\n\r\nfunction Header() {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-dark bg-dark\">\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"https://localhost\">\r\n            <img\r\n              src={logo}\r\n              alt=\"Samdev - Fullstack Developer\"\r\n              className=\"d-inline-block align-text-center\"\r\n            />\r\n            <span className=\"display-4 text-white\">SamDev - List</span>\r\n          </a>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\nimport { firebase } from \"./firebase\";\nimport Header from \"./components/template/Header.jsx\";\n\nfunction App() {\n  const [tareas, setTareas] = useState([]);\n  const [tarea, setTarea] = useState(\"\");\n  const [modoEdicion, setModoEdicion] = useState(false);\n  const [id, setId] = useState(false);\n\n  useEffect(() => {\n    const obtenerDatos = async () => {\n      try {\n        //De esta manera llamamos a firestore al momento de que se renderize este componente.\n        const db = firebase.firestore();\n        //Los metodos y las distintas formas para trabajar con esta bbdd estan indicadas en la documentación. Dejo el enlace a continuación. https://firebase.google.com/docs/firestore/quickstart.\n        // Dentro de los parámetros del metodo collection(nombre_collection) introduciremos el nombre de la colección que hayamos inicializado en la bbdd.\n        const data = await db.collection(\"tareas\").get();\n\n        //almacenamos la informacion que nos devuelve la bbdd para guardarla en el state.\n        const arrayData = data.docs.map((doc) => ({\n          //extraemos el id\n          id: doc.id,\n          //extraemos la data.\n          //hacemos una propagacion para que cree un duplicado del item que estamos manejando debido que de la otra forma es más complicado y javascript nos ayuda para obtener la data de manera más comoda.\n          ...doc.data(),\n        }));\n\n        //almacenamos el array en el state\n        setTareas(arrayData);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    obtenerDatos();\n  }, []);\n\n  const agregar = async (e) => {\n    //evitamos que se recargue la página\n    e.preventDefault();\n\n    //validador de que el campo no este vacio.\n    if (!tarea.trim()) {\n      return;\n    }\n\n    //intentamos enviar los datos a la bbdd.\n    try {\n      //conexion con ddbb\n      const db = firebase.firestore();\n      //construimos un objeto para enviar a la ddbb con el mismo formato de datos a ser posible.\n      const nuevaTarea = {\n        name: tarea,\n        date: Date.now(),\n      };\n      //usamos el metodo .add(objeto) para insertar los nuevos datos a la bbdd.\n      const data = await db.collection(\"tareas\").add(nuevaTarea);\n      //Para refrescar la lista que tenemos creada tenemos que insertar manualmente el item que hemos creado a la lista actual. Al ser una funcion asincrona, pintamos directamente los datos y el id que nos devuelve firebase ya que, de haber algun error, este se saldria y saltaria el error.\n      setTareas([\n        //creamos una copia de los datos que ya existen en el state.\n        ...tareas,\n        //agregamos el objeto creado al state e incorporamos a dicho objeto el id que nos devuelve firebase al momento de agregar el nuevo elemento.\n        { ...nuevaTarea, id: data.id },\n      ]);\n\n      //vaciamos el state para poder agregar nuevos datos a la bbdd.\n      setTarea(\"\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  //funcion para eliminar items\n  const eliminar = async (id) => {\n    try {\n      //configuracion de la ddbb.\n      const db = firebase.firestore();\n      //indicamos el id que vamos a eliminar mediante el metodo .doc(id) y con la funcion delete() la eliminamos de la ddbb.\n      await db.collection(\"tareas\").doc(id).delete();\n\n      const arrayFiltered = tareas.filter((item) => item.id !== id);\n      setTareas(arrayFiltered);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  //Funcion para cambiar a modo Edicion\n  const activarEdicion = (item) => {\n    setModoEdicion(true);\n    setTarea(item.name);\n    setId(item.id);\n  };\n\n  const editar = async (e) => {\n    e.preventDefault();\n\n    //validador de que el campo no este vacio.\n    if (!tarea.trim()) {\n      console.log(\"campo vacio\");\n      return;\n    }\n\n    try {\n      //configuracion de firebase\n      const db = firebase.firestore();\n      //despues de haber capturado al id que se encuentra en el state, utilizamos el metodo update(obj) que se le envia como parametro el campo que deseamos actualizar. No hace falta indicar todos los campos, basta con enviar el campo que deseamos actualizar, el resto no serán afectados.\n      //También, con este método podemos indicar un nuevo campo si estimamos conveniente.\n      await db.collection(\"tareas\").doc(id).update({\n        name: tarea,\n        //podriamos indicar un nuevo campo si deseamos con este método.\n        /* pipi: \"pipi\" */\n      });\n\n      //actualizar lista local de items\n      const arrayEditado = tareas.map((item) =>\n        item.id === id ? { id: item.id, fecha: item.fecha, name: tarea } : item\n      );\n      setTareas(arrayEditado);\n      setModoEdicion(false);\n      setTarea(\"\");\n      setId(\"\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"container-fluid\">\n      <Header />\n      <div className=\"row\">\n      <div className=\"col-md-6\">\n          <h3>{modoEdicion ? \"Editar Tarea\" : \"Agregar Tarea\"}</h3>\n          <form onSubmit={modoEdicion ? editar : agregar}>\n            <input\n              type=\"text\"\n              placeholder=\"Ingrese nueva tarea\"\n              className=\"form-control mb-2 text-dark\"\n              onChange={(e) => setTarea(e.target.value)}\n              value={tarea}\n            />\n            <button\n              className={\n                modoEdicion ? \"btn btn-warning col-12 border mb-5\" : \"btn btn-success col-12 border border-dark mb-5\"\n              }\n              type=\"submit\"\n            >\n              {modoEdicion ? \"Editar Tarea\" : \"Agregar Tarea\"}\n            </button>\n          </form>\n        </div>\n        <div className=\"col-md-6\">\n          <ul className=\"list-group\">\n            {tareas.map((item) => (\n              <li key={item.id} className=\"list-group-item text-dark\">\n                {item.name}\n                <button\n                  className=\"btn btn-danger btn-sm float-end\"\n                  onClick={() => eliminar(item.id)}\n                >\n                  Eliminar\n                </button>\n                <button\n                  className=\"btn btn-warning btn-sm float-end me-2\"\n                  onClick={() => activarEdicion(item)}\n                >\n                  Editar\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}